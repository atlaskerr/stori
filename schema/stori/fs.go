// Code generated by "esc -o=fs.go -modtime=1546544639 -pkg=stori -include=.*\.json$ -ignore=test-fixtures/* ."; DO NOT EDIT.

package stori

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/server-config.schema.json": {
		name:    "server-config.schema.json",
		local:   "server-config.schema.json",
		size:    2829,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/+xWy27bOhDd6ysGvHdpx9kURb0rjBYIEBQGnF2RBSWOpIllUiXHaYXC/15QYhxbD8ZG
ttnO45x5HI70NwEA8T8psQRRMtfLxcKxsbSTBbobY4uFy0rcyYVD+4x2nhmdUyFmXV7nO8l9ckbPO2ub
rKzMeX77OaD8FxKlUsRktKzW1tRomdCJJeSycthFKHSZpdoHefhNyw4d+95KbwclWd4ExPoUp+0q8Fh0
p6YR7IcS4W69KI1jLXcIUiuojWVgAxU5Rg1GB56AwE2NPtWxJV2I4Dm8hAg/QllgnHd11kxuLCjKc7So
GQIAeCJ3zj3aafClMtuiVgPHRTM/i+7VKoYRkTpCRNDKuPd0jCZ9wozFSNRhNgZcSldeAHu+nbdh/fbf
B5u8ySMs/tqTRb+jn5NFzCLj7LsehxyxufZKEmllUq82/BDNh2gmRZOMVjeR83oHuerf3gsFNbjR95vp
4x9SKB8exLjeBGqZVqgiWnQslsB2j0l0bVMDih3rDC1/p2r84fX6X0su/ffoz6fbL+ATKadMMt6I6UWO
Sa7/+rOKUPPq66V13OXgkGcgdQNelOgYaosONZMuQEIHeFoiOCo0KkgbMBrB5MAlgtxzaSz5yQDp1tSl
zjM5z6lCINcGeWQPo+A3cQlSAylv4wYyYy262mjludm0KCuz2xn9w3/IA9WwpPdOLSKb/sC+taHwcL+J
kabGVCh1nHWLzbVyqS09+xVssQE/1Nm1jU+9+xL1UNCxK/Wq9mEFL42dOR6vOznJMW6sjOOPYHK8fQOg
Q/IvAAD//3Z2a2YNCwAA
`,
	},

	"/storage/backend/inmem.schema.json": {
		name:    "inmem.schema.json",
		local:   "storage/backend/inmem.schema.json",
		size:    111,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/xzMMQ7CMAwF0D2n+MoMHICVk6TpLxiwHblmqBB3R+36hvctAOrMtYeMFLd6Rb25LXL/
RNsBo0VTJmPF4oF8EGJnpXpsmFp/0WaIjjeVlk3cLvV0tLkN7p9PT/as5Vf+AQAA//+QhFRQbwAAAA==
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},

	"/storage": {
		name:  "storage",
		local: `storage`,
		isDir: true,
	},

	"/storage/backend": {
		name:  "backend",
		local: `storage/backend`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {
		_escData["/server-config.schema.json"],
	},

	"storage": {},

	"storage/backend": {
		_escData["/storage/backend/inmem.schema.json"],
	},
}
