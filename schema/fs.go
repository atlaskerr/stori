// Code generated by "esc -o=fs.go -pkg=schema -include=.*\.json$ -ignore=test-fixtures/* ."; DO NOT EDIT.

package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/oci/catalog.schema.json": {
		name:    "catalog.schema.json",
		local:   "oci/catalog.schema.json",
		size:    401,
		modtime: 1546544737,
		compressed: `
H4sIAAAAAAAC/2SQMW7DMAxFd52CUDsmcbcCXjMVKNClF1BlxmLgiALJxSh890K20hrN+vjfF8VvBwD+
mQbfg09mpe86LpgjZwuUUfTEMnYaE95CF4OFiUd/2KyN7syrcj5udNUGCRc7vrw2/6mJA2oUKkacq/yZ
SKEIFxSbob2sEGAiNeALCBZWMhZChcRqOABnsIQgOJKazKdW3WoI1fewfq7SfcGO1xEZ3v6xim0uWHdT
E8qj/xsuB/eYCiJhvocW9xvzRjatiY/zG5y368E7qbV17wX8dcVo3i3uJwAA///CisY2kQEAAA==
`,
	},

	"/oci/content-descriptor.schema.json": {
		name:    "content-descriptor.schema.json",
		local:   "oci/content-descriptor.schema.json",
		size:    2011,
		modtime: 1546569111,
		compressed: `
H4sIAAAAAAAC/7RV227bRhB991dMGaNoa1GS5fhGpCmEOEUNpHXq2C8xFGfFHZKTkrvs7CiyIujfiyUp
62LGcR/yRHJ3zsycMxfOdwAg2CUdRBBkImXU69kSTWyNKDLIrms57VGhUuxpdDFTKZaDTo1zcYaFWsN+
ctaE9WkF1KwSCfvHvfrsWQNUZnaRBBHc+C8AmDdPf1eyLZGF0AXR+oW/05SikwfnFUyJIBufyweXqcHh
UXQzDH9XYdIPT0fzo+eLYAOz2Hnwuuh8t3QO9wcb6ewPTp6Qj3+OasWW2pOtfA5hVQxILANjgowmJpOC
gnFux91G61YCgTLGivLutnhtR7rKyEHjYwZNXzhQPCZhxTMoUJRWorrwdmn15/W7K5g4BMkQVpGAJzm6
Jq9Nnd4+onJ3vt9ZtIossxJ9jk6YTPp1PdcDLjF2/AljCbZL31rTbU08rZhnpdiUVZlRDHGG8T9uUkAN
B5tU3OsgHSBTfTZk4eMLlaeWSbLiZfTCT5tG/fJjmzBVA92o8Itvm72ffotu9rq34ej+5OdfIv8+DN/3
w9Nfb8PR3m7QRndTohXdAjWpq9roEcZfT20Yvm9yWb3+8Gz3x/DDbXdvNO939gdHi97TzP5f6o6+4BN6
9/L139fnl6/PVk3sSowpIXRVUbybqkLjmaDrLEvHalp1OxrpwuYQ4B05ceAsSKYEFMQ5oRGYUp5Dpj77
nge8KzEW1JX/akSrrqk9whgTy+hdxugcmbQL53XcHE0q2X0WKEz4GfU9Ult0YKxAoSTOagYNH92AOxuh
3v1xcf3mDP66uIIxgvDECerNISzUHRWTIojgdDA4ODge9A+OTg6fHx8fnvRPNgzJNIbhNyyXxSMjmCI/
rN6E829sniHkVI/S9eUbBwnbAqYZNaSX9Ao187y0nZrcKr1NjQSLlp2SWC6Un/JgwrQOeHSttC4Sxaxm
wfrKrs0Cxn8nxKjX/nN1z7YM3/b6Wdv8QpJXgS5encOrhvXZ9q94e60tdv4LAAD//yxeT3jbBwAA
`,
	},

	"/oci/errors.schema.json": {
		name:    "errors.schema.json",
		local:   "oci/errors.schema.json",
		size:    707,
		modtime: 1546544737,
		compressed: `
H4sIAAAAAAAC/6yRzU7DMBCE732KleHYNtyQekUcOCEhXsDE22arxGt2N5Ui1HdHTkyJws8BcZ2Zb0b2
vq0AwF1TcDtwjVnaVRUnjDVH8xRRdMtyqLRusPMVirC49cRM2ow7KsfNpI5QEL+3zc1toa8KGFBroWTE
McPPDSkk4YRiA5RdBQ8tqQHvYRxV6FDVH1BB0HqJGGAv3IE1CIpyQoHQIxiDj0Dx5FsKIPjao9q2LJcV
QnU7GF+e1al/pmSRDLuF9mPDp11zwO+M7NmQsufUhOLBLSPn9Ze2gOap/b++8oN/LVz9Un+B+eWItc3g
efCS8iJ++AiNxVPMGVk7Jh7vHuA+HwaeUBNHxXLD5dB59R4AAP//RJkb88MCAAA=
`,
	},

	"/oci/image-config.schema.json": {
		name:    "image-config.schema.json",
		local:   "oci/image-config.schema.json",
		size:    7271,
		modtime: 1546544737,
		compressed: `
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
`,
	},

	"/oci/image-index.schema.json": {
		name:    "image-index.schema.json",
		local:   "oci/image-index.schema.json",
		size:    12526,
		modtime: 1546569111,
		compressed: `
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
`,
	},

	"/oci/image-manifest.schema.json": {
		name:    "image-manifest.schema.json",
		local:   "oci/image-manifest.schema.json",
		size:    6341,
		modtime: 1546569111,
		compressed: `
H4sIAAAAAAAC/+yZb3PTuBPHn/dV7C8wv4FrnKaB/iHDcdOhMNcZuHLQ3gM6gSr2Ol4qS0aSm5pO3vuN
LOePUztx2zv65J41slZa7e539bF7vQEArccUtPrQioxJ+ltbMkHhS2EYCVS6I9Voi2I2wq2YCQpRm1bb
WWk/wpgtWH7TUnhuNDcLFAuN193bcmOPCsNEyQSVIdStPuQe2FEmhDTMkBSLw/ZJgNpXlNhHdrOTiDQU
a2RQeKqBqSEZxVQGMRoWMMM68GE66/3ppxNINYKJEOY7gUo56o7zq9gtYcagEh+qnCymdK6325Mbw/aJ
yRK0PmqjSIxapeeT+a/J4oZTGzn8hr6Z2symtHwpQhotxaRhyqahk6p0xrumbpaq7Dhs9eGsdL6b0Ujq
YzhNLY1sQVU/XciG9fSLjlhvZ7d/duC9ZV7Y9V4MrnefT1oVlpONlQOL4f9Jju9s90qOb/f27+T5/Neg
XS+RA5gnHkKpQGGICoVPYgQMhlwOl4p+RbXXCvMh5NlYpOuk2kCwdRlp18q+LOHK6SsqZzmSNhi+yhIj
R4olEfngR+hf6DQGtwjIMI+Y27YNJPKfRXDg/CXjI6nIRPGr/kvbIQIMXp3XhzMv1jPm/bAluvnkt/7Z
ZuerN5iNPP2lb/8+8D53vRe/fvUGm49b7dv1wKVgxBgQO3EGa+OxzvED73Ph6fzP/z16/H/vy9fO5uC6
297u7U62mk2778E0/cDGavn45s/To49vDuey0Qn6FBLqPKF2sTy7w8ygbk/Trtg41xcK04Gy7PCKtNGg
JZiIGWDgc0JhYEycQ8QurcoArxL0DQb5+nmbyCvOrQhDDKVCu6SPWpMYdeDI7ctRjEw08wKNIrzEYGYZ
SNQgpIGYGT9yJyjOExTG7dJWn34/Pn13CH8cn8AQwahUGwyqZB+zK4rTuNWHF73es2d7ve6z3f2d53t7
O/vd/YrpJIrpXqP50wSTMDhCtTrDqeKN+uEBcHJSPf34TkOoZAzjiIrATEMQs8yePZBjwSULqo9PBuPa
ThdKFTPbV1qpopvGDZrdisbGlGJZM5xR+D0lhcENPnCaqG0A1W2y5r4zZHju2PHrI3hdxPCwGnbW8RVn
Gao1zPmG+RHY8E97bB4Qd28NEdjCfWulWHqey83aDJlGyHcDZoBEgFfQ7cCndKjxe2pP4FxxZiZCAaHk
XI7tptow/wKkClDBE+pgx1WSszjrDsDI6Q+O4on786m3PXjqHApJMA4hcdSZtgfhLJOpcXvNhapQpzyv
VpYkPLO8kEveOWZk3jfixGQQkELfSJW59eXYomdESRtiGWAbmAhAmig/rFE0TA3qac8gQYYYX14JmEJI
xaxZlBmluvrvR8L3h+F6Hq4iy0Zw2YQv787GVUjTDHN+6mmaAnPj45QGBsvd5n78vD4Q6yj6gUD6Nizd
AKebEXVdylbeWVVoXX1nrSy2B2Psfxqz73afr+TtRsj9s6n7buesw+//CPx+BH57CL8Dh69F8eqc1wH5
v8rk67C8GZk3/BKxMlIViL7uw1c9q9fg+ipir4T2iqv2Fui+sv9XfkMtBWGO+I7b/kKlXQGs+7q8th3k
68GlW7ADb3Plkp6OgAwXNOfnd3DbzZi+Mpz3zi1Oo9Cpsq8G/sWYKavgOGGGhsTJZDAmq3Jumb9YOUfo
Q+lfYPGiccl4iq4TkIaQkAeux1j5+xETIyxj9Fy+vdLwTKO9qsAu6TAvKxffqiJaCvjyp+zlV6+NWZmU
q+PIkju8L//bYbkgJht/BwAA///o6eEwxRgAAA==
`,
	},

	"/oci/tag-list.schema.json": {
		name:    "tag-list.schema.json",
		local:   "oci/tag-list.schema.json",
		size:    432,
		modtime: 1546544737,
		compressed: `
H4sIAAAAAAAC/3SQwWrrQAxF9/4KMe8tk0x3BW+7KhS6yQ+otmIr2KNB0saU/HsZe5KaQJc+vudeNN8N
AIT/3IcWwuie2xglU+okOXIitZPoEK0bacboOFic2DwcNm/jO/dqko4bXcVe8eLHl9fa8K+KPVmnnJ0l
Ffk8skFWyaS+QN02QChbIBfAaYIyDpwAQSmLsYsup9pXXSYLLaw3FZpwpt13Qb7kgoK5chpC/XM73JUy
8qSw0/zE/m7al+1TqIrLY655xIKzT2vi8+0dzuXEj9/3vdvydaXOQ3NrfgIAAP//IdRifbABAAA=
`,
	},

	"/stori/server-config.schema.json": {
		name:    "server-config.schema.json",
		local:   "stori/server-config.schema.json",
		size:    729,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/5SRwU4CQQyG7/sUzegRWC7GyAOYmHggwReoM93dwjIz6VQiMby7GXYkKKuGa/t/f/8/
/agAwNyyMwswnWpc1HXSILzFltIsSFsn29EW60SyI5na4BtuzWTght0Zu07BT4fpEXaCjU7n98XlpoCO
khWOysFneHX0hsH7TTDPwaHirOijhEiiTMks4Jg5T9E5oXQ+GvF+6QielnUXknrcEqB3EIMoaICek5KH
4Mud4qD7SBlNKuxbUzaHL4nR/r+bz6vfyxRktFLZWRJ95J4uNiO3lqhd7vJ+N3+ADHLDFpW+Xfuz2I96
Rbuh/bURovAOlWBDe2i4p8m1EarRNCcmvK7J6ukf1Ul3oThUnwEAAP//T/d9VtkCAAA=
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},

	"/oci": {
		name:  "oci",
		local: `oci`,
		isDir: true,
	},

	"/stori": {
		name:  "stori",
		local: `stori`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {},

	"oci": {
		_escData["/oci/catalog.schema.json"],
		_escData["/oci/content-descriptor.schema.json"],
		_escData["/oci/errors.schema.json"],
		_escData["/oci/image-config.schema.json"],
		_escData["/oci/image-index.schema.json"],
		_escData["/oci/image-manifest.schema.json"],
		_escData["/oci/tag-list.schema.json"],
	},

	"stori": {
		_escData["/stori/server-config.schema.json"],
	},
}
